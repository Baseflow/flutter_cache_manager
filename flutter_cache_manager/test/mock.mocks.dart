// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_cache_manager/test/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i4;
import 'package:flutter_cache_manager/src/cache_store.dart' as _i6;
import 'package:flutter_cache_manager/src/storage/cache_object.dart' as _i2;
import 'package:flutter_cache_manager/src/storage/file_system/file_system.dart'
    as _i3;
import 'package:flutter_cache_manager/src/web/web_helper.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCacheObject_0 extends _i1.SmartFake implements _i2.CacheObject {
  _FakeCacheObject_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystem_2 extends _i1.SmartFake implements _i3.FileSystem {
  _FakeFileSystem_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_3 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileServiceResponse_4 extends _i1.SmartFake
    implements _i4.FileServiceResponse {
  _FakeFileServiceResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileService_5 extends _i1.SmartFake implements _i4.FileService {
  _FakeFileService_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CacheInfoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheInfoRepositoryBase extends _i1.Mock
    implements _i4.CacheInfoRepository {
  MockCacheInfoRepositoryBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<dynamic> updateOrInsert(_i2.CacheObject? cacheObject) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrInsert,
          [cacheObject],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<_i2.CacheObject> insert(
    _i2.CacheObject? cacheObject, {
    bool? setTouchedToNow = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [cacheObject],
          {#setTouchedToNow: setTouchedToNow},
        ),
        returnValue: _i5.Future<_i2.CacheObject>.value(_FakeCacheObject_0(
          this,
          Invocation.method(
            #insert,
            [cacheObject],
            {#setTouchedToNow: setTouchedToNow},
          ),
        )),
      ) as _i5.Future<_i2.CacheObject>);
  @override
  _i5.Future<_i2.CacheObject?> get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i5.Future<_i2.CacheObject?>.value(),
      ) as _i5.Future<_i2.CacheObject?>);
  @override
  _i5.Future<int> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<int> deleteAll(Iterable<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [ids],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<int> update(
    _i2.CacheObject? cacheObject, {
    bool? setTouchedToNow = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cacheObject],
          {#setTouchedToNow: setTouchedToNow},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<List<_i2.CacheObject>> getAllObjects() => (super.noSuchMethod(
        Invocation.method(
          #getAllObjects,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.CacheObject>>.value(<_i2.CacheObject>[]),
      ) as _i5.Future<List<_i2.CacheObject>>);
  @override
  _i5.Future<List<_i2.CacheObject>> getObjectsOverCapacity(int? capacity) =>
      (super.noSuchMethod(
        Invocation.method(
          #getObjectsOverCapacity,
          [capacity],
        ),
        returnValue:
            _i5.Future<List<_i2.CacheObject>>.value(<_i2.CacheObject>[]),
      ) as _i5.Future<List<_i2.CacheObject>>);
  @override
  _i5.Future<List<_i2.CacheObject>> getOldObjects(Duration? maxAge) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOldObjects,
          [maxAge],
        ),
        returnValue:
            _i5.Future<List<_i2.CacheObject>>.value(<_i2.CacheObject>[]),
      ) as _i5.Future<List<_i2.CacheObject>>);
  @override
  _i5.Future<bool> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> deleteDataFile() => (super.noSuchMethod(
        Invocation.method(
          #deleteDataFile,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [CacheStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheStoreBase extends _i1.Mock implements _i6.CacheStore {
  MockCacheStoreBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get cleanupRunMinInterval => (super.noSuchMethod(
        Invocation.getter(#cleanupRunMinInterval),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#cleanupRunMinInterval),
        ),
      ) as Duration);
  @override
  set cleanupRunMinInterval(Duration? _cleanupRunMinInterval) =>
      super.noSuchMethod(
        Invocation.setter(
          #cleanupRunMinInterval,
          _cleanupRunMinInterval,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.FileSystem get fileSystem => (super.noSuchMethod(
        Invocation.getter(#fileSystem),
        returnValue: _FakeFileSystem_2(
          this,
          Invocation.getter(#fileSystem),
        ),
      ) as _i3.FileSystem);
  @override
  set fileSystem(_i3.FileSystem? _fileSystem) => super.noSuchMethod(
        Invocation.setter(
          #fileSystem,
          _fileSystem,
        ),
        returnValueForMissingStub: null,
      );
  @override
  DateTime get lastCleanupRun => (super.noSuchMethod(
        Invocation.getter(#lastCleanupRun),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.getter(#lastCleanupRun),
        ),
      ) as DateTime);
  @override
  set lastCleanupRun(DateTime? _lastCleanupRun) => super.noSuchMethod(
        Invocation.setter(
          #lastCleanupRun,
          _lastCleanupRun,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get storeKey => (super.noSuchMethod(
        Invocation.getter(#storeKey),
        returnValue: '',
      ) as String);
  @override
  _i5.Future<_i4.FileInfo?> getFile(
    String? key, {
    bool? ignoreMemCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFile,
          [key],
          {#ignoreMemCache: ignoreMemCache},
        ),
        returnValue: _i5.Future<_i4.FileInfo?>.value(),
      ) as _i5.Future<_i4.FileInfo?>);
  @override
  _i5.Future<void> putFile(_i2.CacheObject? cacheObject) => (super.noSuchMethod(
        Invocation.method(
          #putFile,
          [cacheObject],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i2.CacheObject?> retrieveCacheData(
    String? key, {
    bool? ignoreMemCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveCacheData,
          [key],
          {#ignoreMemCache: ignoreMemCache},
        ),
        returnValue: _i5.Future<_i2.CacheObject?>.value(),
      ) as _i5.Future<_i2.CacheObject?>);
  @override
  _i5.Future<_i4.FileInfo?> getFileFromMemory(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFileFromMemory,
          [key],
        ),
        returnValue: _i5.Future<_i4.FileInfo?>.value(),
      ) as _i5.Future<_i4.FileInfo?>);
  @override
  _i5.Future<void> emptyCache() => (super.noSuchMethod(
        Invocation.method(
          #emptyCache,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void emptyMemoryCache() => super.noSuchMethod(
        Invocation.method(
          #emptyMemoryCache,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> removeCachedFile(_i2.CacheObject? cacheObject) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeCachedFile,
          [cacheObject],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileServiceBase extends _i1.Mock implements _i4.FileService {
  MockFileServiceBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get concurrentFetches => (super.noSuchMethod(
        Invocation.getter(#concurrentFetches),
        returnValue: 0,
      ) as int);
  @override
  set concurrentFetches(int? _concurrentFetches) => super.noSuchMethod(
        Invocation.setter(
          #concurrentFetches,
          _concurrentFetches,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i4.FileServiceResponse> get(
    String? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i4.FileServiceResponse>.value(
            _FakeFileServiceResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i4.FileServiceResponse>);
}

/// A class which mocks [WebHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebHelper extends _i1.Mock implements _i7.WebHelper {
  MockWebHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FileService get fileFetcher => (super.noSuchMethod(
        Invocation.getter(#fileFetcher),
        returnValue: _FakeFileService_5(
          this,
          Invocation.getter(#fileFetcher),
        ),
      ) as _i4.FileService);
  @override
  int get concurrentCalls => (super.noSuchMethod(
        Invocation.getter(#concurrentCalls),
        returnValue: 0,
      ) as int);
  @override
  set concurrentCalls(int? _concurrentCalls) => super.noSuchMethod(
        Invocation.setter(
          #concurrentCalls,
          _concurrentCalls,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Stream<_i4.FileResponse> downloadFile(
    String? url, {
    String? key,
    Map<String, String>? authHeaders,
    bool? ignoreMemCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFile,
          [url],
          {
            #key: key,
            #authHeaders: authHeaders,
            #ignoreMemCache: ignoreMemCache,
          },
        ),
        returnValue: _i5.Stream<_i4.FileResponse>.empty(),
      ) as _i5.Stream<_i4.FileResponse>);
}
